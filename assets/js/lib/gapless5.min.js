const gapless5Players={};const Gapless5State={None:0,Loading:1,Starting:2,Play:3,Stop:4,Error:5};const LogLevel={Debug:1,Info:2,Warning:3,Error:4,None:5};function Gapless5Source(parentPlayer,parentLog,inAudioPath){this.audioPath=inAudioPath;const player=parentPlayer;const log=parentLog;let audio=null;let source=null;let buffer=null;let request=null;let lastTick=0;let position=0;let endpos=0;let queuedState=Gapless5State.None;let state=Gapless5State.None;let loadedPercent=0;let endedCallback=null;this.setVolume=val=>{if(audio!==null){audio.volume=val}};const setState=newState=>{if(state!==newState&&newState===Gapless5State.Play){lastTick=(new Date).getTime()}state=newState;queuedState=Gapless5State.None;player.uiDirty=true};this.getState=()=>state;this.unload=isError=>{this.stop();setState(isError?Gapless5State.Error:Gapless5State.None);if(request){request.abort()}audio=null;source=null;buffer=null;position=0;endpos=0;player.onunload(this.audioPath)};const onEnded=()=>{if(state===Gapless5State.Play){setEndedCallbackTime(endpos/1e3);player.onEndedCallback()}};const parseError=error=>{if(error){if(error.message){return error.message}if(error.target&&error.target.error&&error.target.error.message){return error.target.error.message}return error}return"Error playing Gapless 5 audio"};const onError=error=>{const message=parseError(error);log.error(message);player.onerror(this.audioPath,message);this.unload(true)};const onLoadedWebAudio=inBuffer=>{if(!request){return}request=null;buffer=inBuffer;endpos=inBuffer.duration*1e3;if(queuedState===Gapless5State.Play&&state===Gapless5State.Loading){playAudioFile(true)}else if(audio!==null&&queuedState===Gapless5State.None&&this.inPlayState(true)){log.debug(`switching from HTML5 to WebAudio: ${this.audioPath}`);this.setPosition(audio.position,true)}if(state===Gapless5State.Loading){state=Gapless5State.Stop}player.onload(this.audioPath);player.uiDirty=true};const onLoadedHTML5Audio=()=>{if(state!==Gapless5State.Loading){return}state=Gapless5State.Stop;endpos=audio.duration*1e3;if(queuedState===Gapless5State.Play){playAudioFile(true)}player.uiDirty=true};this.stop=()=>{if(state===Gapless5State.None){return}log.debug(`Stopping: ${this.audioPath}`);if(player.useWebAudio){if(source){if(endedCallback){window.clearTimeout(endedCallback);endedCallback=null}source.stop(0)}}if(audio&&state!==Gapless5State.Starting){audio.pause()}setState(Gapless5State.Stop)};const setEndedCallbackTime=restSecNormalized=>{if(endedCallback){window.clearTimeout(endedCallback)}const restSec=restSecNormalized/player.playbackRate;log.debug(`onEnded will be called in ${restSec.toFixed(2)} sec`);endedCallback=window.setTimeout(onEnded,restSec*1e3)};const playAudioFile=()=>{if(this.inPlayState(true)){return}position=Math.max(position,0);if(!Number.isFinite(position)||position>=this.getLength()){position=0}const offsetSec=position/1e3;const looped=player.isSingleLoop();if(buffer!==null){log.debug(`Playing WebAudio${looped?" (looped)":""}: ${this.audioPath}`);player.context.resume();source=player.context.createBufferSource();source.connect(player.gainNode);source.buffer=buffer;source.playbackRate.value=player.playbackRate;source.loop=looped;source.start(0,offsetSec);player.onplay(this.audioPath);setState(Gapless5State.Play);setEndedCallbackTime(source.buffer.duration-offsetSec)}else if(audio!==null){log.debug(`Playing HTML5 Audio${looped?" (looped)":""}: ${this.audioPath}`);audio.currentTime=offsetSec;audio.volume=player.gainNode.gain.value;audio.loop=looped;audio.playbackRate=player.playbackRate;setState(Gapless5State.Starting);audio.play().then(()=>{if(state===Gapless5State.Starting){setState(Gapless5State.Play);player.onplay(this.audioPath);setEndedCallbackTime(audio.duration-offsetSec)}else{audio.pause()}})}};this.inPlayState=checkStarting=>state===Gapless5State.Play||checkStarting&&state===Gapless5State.Starting;this.isPlayActive=checkStarting=>this.inPlayState(checkStarting)||queuedState===Gapless5State.Play;this.getPosition=()=>position;this.getLength=()=>endpos;this.play=()=>{if(state===Gapless5State.Loading){log.debug(`Loading ${this.audioPath}`);queuedState=Gapless5State.Play}else{playAudioFile()}};this.setPlaybackRate=rate=>{if(source){source.playbackRate.value=rate}if(audio){audio.playbackRate=rate}setEndedCallbackTime((endpos-position)/1e3)};this.tick=()=>{if(state===Gapless5State.Play){const nextTick=(new Date).getTime();const elapsed=nextTick-lastTick;position=position+elapsed*player.playbackRate;lastTick=nextTick;const shouldLoop=player.isSingleLoop();if(source&&source.loop!==shouldLoop){source.loop=shouldLoop;log.debug(`Setting WebAudio loop to ${shouldLoop}`)}if(audio&&audio.loop!==shouldLoop){audio.loop=shouldLoop;log.debug(`Setting HTML5 audio loop to ${shouldLoop}`)}}if(loadedPercent<1){let newPercent=1;if(state===Gapless5State.Loading){newPercent=0}else if(audio&&audio.seekable.length>0){newPercent=audio.seekable.end(0)/audio.duration}if(loadedPercent!==newPercent){loadedPercent=newPercent;player.setLoadedSpan(loadedPercent)}}};this.setPosition=(newPosition,bResetPlay)=>{position=newPosition;if(bResetPlay&&this.inPlayState()){this.stop();this.play()}};const fetchBlob=(audioPath,loader)=>{fetch(audioPath).then(r=>{if(r.ok){r.blob().then(blob=>{loader(blob)})}else{onError(r.statusText)}}).catch(e=>{onError(e)})};this.load=()=>{if(state===Gapless5State.Loading){return}const{audioPath}=this;player.onloadstart(audioPath);state=Gapless5State.Loading;if(player.useWebAudio){const onLoadWebAudio=data=>{if(data){player.context.decodeAudioData(data).then(incomingBuffer=>{onLoadedWebAudio(incomingBuffer)})}};if(audioPath.startsWith("blob:")){fetchBlob(audioPath,blob=>{request=new FileReader;request.onload=()=>{if(request){onLoadWebAudio(request.result)}};request.readAsArrayBuffer(blob);if(request.error){onError(request.error)}})}else{request=new XMLHttpRequest;request.open("get",audioPath,true);request.responseType="arraybuffer";request.onload=()=>{if(request){onLoadWebAudio(request.response)}};request.onerror=()=>{if(request){onError("Failed to load audio track")}};request.send()}}if(player.useHTML5Audio){const getHtml5Audio=()=>{const audioObj=new Audio;audioObj.controls=false;audioObj.preservesPitch=false;audioObj.mozPreservesPitch=false;audioObj.webkitPreservesPitch=false;audioObj.addEventListener("canplaythrough",onLoadedHTML5Audio,false);audioObj.addEventListener("error",onError,false);return audioObj};if(audioPath.startsWith("blob:")){fetchBlob(audioPath,blob=>{audio=getHtml5Audio();audio.srcObject=blob;audio.load()})}else{audio=getHtml5Audio();audio.src=audioPath;audio.load()}}}}function Gapless5FileList(parentPlayer,parentLog,inShuffle,inLoadLimit=-1){const player=parentPlayer;const log=parentLog;this.sources=[];this.startingTrack=0;this.trackNumber=-1;this.shuffledIndices=[];this.shuffleMode=Boolean(inShuffle);this.shuffleRequest=null;this.preserveCurrent=true;this.loadLimit=inLoadLimit;this.setStartingTrack=inStartingTrack=>{if(inStartingTrack==="random"){this.startingTrack=Math.floor(Math.random()*this.sources.length)}else{this.startingTrack=inStartingTrack||0}log.debug(`Setting starting track to ${this.startingTrack}`);this.trackNumber=this.startingTrack};this.gotoTrack=(pointOrPath,forcePlay,allowOverride)=>{const{index:prevIndex,source:prevSource}=this.getSourceIndexed(this.trackNumber);const wasPlaying=prevSource.isPlayActive();const requestedIndex=this.indexFromTrack(pointOrPath);const updateShuffle=nextIndex=>{if(this.shuffleRequest!==null){if(this.shuffleRequest){this.shuffleRequest=null;return enableShuffle(nextIndex)}this.shuffleRequest=null;return disableShuffle(nextIndex)}return nextIndex};this.trackNumber=allowOverride?updateShuffle(requestedIndex):requestedIndex;log.debug(`Setting track number to ${this.trackNumber}`);this.updateLoading();player.scrub(0,true);const{index:nextIndex,source:nextSource}=this.getSourceIndexed(this.trackNumber);if(prevIndex===nextIndex){if(forcePlay||wasPlaying&&!player.isSingleLoop()){prevSource.stop();prevSource.play()}return this.trackNumber}prevSource.setPosition(0);prevSource.stop();if(forcePlay||wasPlaying){nextSource.play()}return this.trackNumber};const enableShuffle=nextIndex=>{const indices=Array.from(Array(this.sources.length).keys());for(let n=0;n<indices.length-1;n++){const k=n+Math.floor(Math.random()*(indices.length-n));[indices[k],indices[n]]=[indices[n],indices[k]]}if(this.preserveCurrent&&this.trackNumber===indices[nextIndex]){[indices[this.trackNumber],indices[nextIndex]]=[indices[nextIndex],indices[this.trackNumber]]}if(JSON.stringify(indices)===JSON.stringify(Array.from(Array(this.sources.length).keys()))){const subIndices=indices.filter(index=>index!==this.trackNumber);const subIndex1=Math.floor(Math.random()*subIndices.length);const subIndex2=(subIndex1+1)%subIndices.length;const index1=indices[subIndices[subIndex1]];const index2=indices[subIndices[subIndex2]];[indices[index1],indices[index2]]=[indices[index2],indices[index1]]}this.shuffledIndices=indices;this.shuffleMode=true;log.debug(`Shuffled tracks: ${this.shuffledIndices}`);return nextIndex};const disableShuffle=nextIndex=>{this.shuffleMode=false;log.debug("Disabling shuffle");if(this.preserveCurrent&&this.shuffledIndices[this.trackNumber]===nextIndex){return(nextIndex+1)%this.numTracks()}return nextIndex};this.lastIndex=(index,newList,oldList)=>{const compare=newList[index];for(let n=0;n<oldList.length;n++){if(oldList[n].index===compare.index){return n}}return 0};this.removeAllTracks=flushList=>{for(let i=0;i<this.sources.length;i++){this.sources[i].unload()}if(flushList){this.shuffledIndices=[];this.setStartingTrack(-1)}this.sources=[]};this.setPlaybackRate=rate=>{for(let i=0;i<this.sources.length;i++){this.sources[i].setPlaybackRate(rate)}};this.setShuffle=(nextShuffle,preserveCurrent=true)=>{this.shuffleRequest=nextShuffle;this.preserveCurrent=preserveCurrent;if(!preserveCurrent){enableShuffle(this.trackNumber)}};this.isShuffled=()=>{if(this.shuffleRequest!==null){return this.shuffleRequest}return this.shuffleMode};this.numTracks=()=>this.sources.length;this.getTracks=()=>{const tracks=[];for(let i=0;i<this.numTracks();i++){const{source}=this.getSourceIndexed(i);tracks.push(source.audioPath)}return tracks};this.indexFromTrack=pointOrPath=>typeof pointOrPath==="string"?this.findTrack(pointOrPath):pointOrPath;this.findTrack=path=>this.getTracks().indexOf(path);this.getSourceIndexed=index=>{const realIndex=this.shuffleMode?this.shuffledIndices[index]:index;return{index:realIndex,source:this.sources[realIndex]}};this.getPlaylistIndex=index=>this.shuffleMode?this.shuffledIndices.indexOf(index):index;const generateIntRange=(first,last)=>Array.from({length:1+last-first},(_v,k)=>k+first);this.loadableTracks=()=>{if(this.loadLimit===-1){return new Set(generateIntRange(0,this.sources.length))}const startTrack=Math.round(Math.max(0,this.trackNumber-(this.loadLimit-1)/2));const endTrack=Math.round(Math.min(this.sources.length,this.trackNumber+this.loadLimit/2));const loadableIndices=new Set(generateIntRange(startTrack,endTrack));if(player.queuedTrack){loadableIndices.add(this.indexFromTrack(player.queuedTrack))}log.debug(`loadable indices: ${JSON.stringify([...loadableIndices])}`);return loadableIndices};this.updateLoading=()=>{const loadableSet=this.loadableTracks();for(const[index,source]of this.sources.entries()){const playlistIndex=this.getPlaylistIndex(index);const shouldLoad=loadableSet.has(playlistIndex);if(shouldLoad===(source.getState()===Gapless5State.None)){if(shouldLoad){log.debug(`Loading track ${playlistIndex}: ${source.audioPath}`);source.load()}else{log.debug(`Unloading track ${playlistIndex}: ${source.audioPath}`);source.unload()}}}};this.add=(index,audioPath)=>{const source=new Gapless5Source(player,log,audioPath);this.sources.splice(index,0,source);this.shuffledIndices.splice(Math.floor(Math.random()*this.numTracks()),0,this.numTracks()-1);if(index<=this.trackNumber||this.trackNumber===-1){this.trackNumber=this.trackNumber+1;if(this.trackNumber>0){log.debug(`Insertion shifted current track number to ${this.trackNumber}`)}}this.updateLoading()};this.remove=index=>{this.sources.splice(index,1);this.shuffledIndices.splice(this.shuffledIndices.indexOf(index),1);if(this.trackNumber>0&&(index<this.trackNumber||index>=this.numTracks()-2)){this.trackNumber=this.trackNumber-1;log.debug(`Decrementing track number to ${this.trackNumber}`)}this.updateLoading()}}function Gapless5(options={},deprecated={}){if(typeof options==="string"){console.warn('Using deprecated API.  Pass element id into options as "guiId"');options={...deprecated,guiId:options}}const scrubSize=65535;const statusText={loading:"loading…",error:"error!"};this.hasGUI=false;this.scrubWidth=0;this.scrubPosition=0;this.isScrubbing=false;let tickCallback=null;this.tickMS=27;this.initialized=false;this.uiDirty=true;const log={debug:()=>{},log:()=>{},warn:()=>{},error:()=>{}};switch(options.logLevel||LogLevel.Info){case LogLevel.Debug:log.debug=console.debug;case LogLevel.Info:log.info=console.info;case LogLevel.Warning:log.warn=console.warn;case LogLevel.Error:log.error=console.error;case LogLevel.None:default:break}this.playlist=new Gapless5FileList(this,log,options.shuffle,options.loadLimit);this.loop=options.loop||false;this.singleMode=options.singleMode||false;this.exclusive=options.exclusive||false;this.queuedTrack=null;this.useWebAudio=options.useWebAudio!==false;this.useHTML5Audio=options.useHTML5Audio!==false;this.playbackRate=options.playbackRate||1;this.id=Math.floor((1+Math.random())*65536);gapless5Players[this.id]=this;if(window.gapless5AudioContext===undefined){const MaybeContext=window.AudioContext||window.webkitAudioContext;if(MaybeContext){window.gapless5AudioContext=new MaybeContext}}this.context=window.gapless5AudioContext;this.gainNode=this.context!==undefined?this.context.createGain():null;if(this.context&&this.gainNode){this.gainNode.gain.value=options.volume!==undefined?options.volume:1;this.gainNode.connect(this.context.destination)}this.isPlayButton=true;this.keyMappings={};this.onprev=()=>{};this.onplayrequest=()=>{};this.onplay=()=>{};this.onpause=()=>{};this.onstop=()=>{};this.onnext=()=>{};this.onerror=()=>{};this.onloadstart=()=>{};this.onload=()=>{};this.onunload=()=>{};this.onfinishedtrack=()=>{};this.onfinishedall=()=>{};const getUIPos=()=>{const{isScrubbing,scrubPosition}=this;const position=isScrubbing?scrubPosition:this.currentSource().getPosition();return position/this.currentSource().getLength()*scrubSize};const getSoundPos=uiPosition=>uiPosition/scrubSize*this.currentSource().getLength();this.getIndex=(sourceIndex=false)=>{if(this.playlist!==null){const{trackNumber}=this.playlist;return sourceIndex?this.playlist.getSourceIndexed(trackNumber).index:trackNumber}return-1};const getFormattedTime=inMS=>{let minutes=Math.floor(inMS/6e4);const secondsFull=(inMS-minutes*6e4)/1e3;let seconds=Math.floor(secondsFull);let csec=Math.floor((secondsFull-seconds)*100);if(minutes<10){minutes=`0${minutes}`}if(seconds<10){seconds=`0${seconds}`}if(csec<10){csec=`0${csec}`}return`${minutes}:${seconds}.${csec}`};const getTotalPositionText=()=>{let text=statusText.loading;if(this.totalTracks()===0){return text}const source=this.currentSource();const srcLength=source.getLength();if(this.totalTracks()===0){text=getFormattedTime(0)}else if(source.state===Gapless5State.Error){text=statusText.error}else if(srcLength>0){text=getFormattedTime(srcLength)}return text};const getElement=prefix=>document.getElementById(`${prefix}${this.id}`);const isValidIndex=index=>index>=0&&index<this.playlist.numTracks();this.totalTracks=()=>{if(this.playlist!==null){return this.playlist.numTracks()}return 0};this.isSingleLoop=()=>this.loop&&(this.singleMode||this.totalTracks()===1);this.mapKeys=keyOptions=>{for(let key in keyOptions){const uppercode=keyOptions[key].toUpperCase().charCodeAt(0);const lowercode=keyOptions[key].toLowerCase().charCodeAt(0);const player=gapless5Players[this.id];if(Gapless5.prototype.hasOwnProperty.call(player,key)){this.keyMappings[uppercode]=player[key];this.keyMappings[lowercode]=player[key]}else{log.error(`Gapless5 mapKeys() error: no function named '${key}'`)}}document.addEventListener("keydown",e=>{const keyCode=e.key.charCodeAt(0);if(keyCode in this.keyMappings){this.keyMappings[keyCode](e)}})};this.setVolume=volume=>{this.gainNode.gain.value=volume;this.currentSource().setVolume(volume);if(this.hasGUI){getElement("volume").value=scrubSize*volume}};this.setHTML5Audio=bool=>{this.useWebAudio=bool};this.setGain=uiPos=>{log.warn("Using deprecated API.  Use setVolume() with value between 0 and 1 instead.");this.setVolume(uiPos/scrubSize)};this.scrub=(uiPos,updateTransport=false)=>{if(this.hasGUI){this.scrubPosition=getSoundPos(uiPos);getElement("currentPosition").innerText=getFormattedTime(this.scrubPosition);enableButton("prev",this.loop||(this.getIndex()!==0||this.scrubPosition!==0));if(updateTransport){getElement("transportbar").value=uiPos}if(!this.isScrubbing){this.currentSource().setPosition(this.scrubPosition)}}};this.setLoadedSpan=percent=>{if(this.hasGUI){getElement("loaded-span").style.width=percent*this.scrubWidth;if(percent===1){getElement("totalPosition").innerText=getTotalPositionText()}}};this.onEndedCallback=()=>{const{audioPath}=this.currentSource();let finishedAll=false;if(this.queuedTrack){this.gotoTrack(this.queuedTrack);this.queuedTrack=null}else if(this.loop||this.getIndex()<this.totalTracks()-1){if(this.singleMode||this.totalTracks()===1){this.prev(!this.loop)}else{this.currentSource().stop(true);this.next(true)}}else{this.currentSource().stop(true);this.scrub(0,true);finishedAll=true}this.onfinishedtrack(audioPath);if(finishedAll){this.onfinishedall()}};this.onStartedScrubbing=()=>{this.isScrubbing=true};this.onFinishedScrubbing=()=>{this.isScrubbing=false;if(this.currentSource().inPlayState()&&this.scrubPosition>=this.currentSource().getLength()){this.next(true)}else{this.currentSource().setPosition(this.scrubPosition,true)}};this.addTrack=audioPath=>{const next=this.playlist.sources.length;this.playlist.add(next,audioPath);this.uiDirty=true};this.insertTrack=(point,audioPath)=>{const trackCount=this.totalTracks();const safePoint=Math.min(Math.max(point,0),trackCount);if(safePoint===trackCount){this.addTrack(audioPath)}else{this.playlist.add(safePoint,audioPath)}this.uiDirty=true};this.getTracks=()=>this.playlist.getTracks();this.findTrack=path=>this.playlist.findTrack(path);this.removeTrack=pointOrPath=>{const point=this.playlist.indexFromTrack(pointOrPath);if(!isValidIndex(point)){log.warn(`Cannot remove missing track: ${pointOrPath}`);return}const deletedPlaying=point===this.playlist.trackNumber;const curSource=this.playlist.sources[point];if(!curSource){return}let wasPlaying=false;if(curSource.state===Gapless5State.Loading){curSource.unload()}else if(curSource.inPlayState(true)){wasPlaying=true;curSource.stop()}this.playlist.remove(point);if(deletedPlaying){this.next();if(wasPlaying){this.play()}}this.uiDirty=true};this.replaceTrack=(point,audioPath)=>{this.removeTrack(point);this.insertTrack(point,audioPath)};this.removeAllTracks=(flushPlaylist=true)=>{this.playlist.removeAllTracks(flushPlaylist);this.uiDirty=true};this.isShuffled=()=>this.playlist.isShuffled();this.shuffle=(preserveCurrent=true)=>{if(!this.canShuffle()){return}this.playlist.setShuffle(true,preserveCurrent);this.uiDirty=true};this.toggleShuffle=()=>{if(this.canShuffle()){this.playlist.setShuffle(!this.isShuffled());this.uiDirty=true}};this.shuffleToggle=this.toggleShuffle;this.currentSource=()=>this.playlist.sources[this.getIndex(true)];this.setPlaybackRate=rate=>{tick();this.playbackRate=rate;this.playlist.setPlaybackRate(rate)};this.queueTrack=pointOrPath=>{if(!isValidIndex(this.playlist.indexFromTrack(pointOrPath))){log.error(`Cannot queue missing track: ${pointOrPath}`)}else{this.queuedTrack=pointOrPath;this.playlist.updateLoading()}};this.gotoTrack=(pointOrPath,forcePlay,allowOverride=false)=>{if(!isValidIndex(this.playlist.indexFromTrack(pointOrPath))){log.error(`Cannot go to missing track: ${pointOrPath}`)}else{const newIndex=this.playlist.gotoTrack(pointOrPath,forcePlay,allowOverride);enableButton("prev",this.loop||!this.singleMode&&newIndex>0);enableButton("next",this.loop||!this.singleMode&&newIndex<this.totalTracks()-1);this.uiDirty=true}};this.prevtrack=()=>{if(this.totalTracks()===0){return}let track=0;if(this.getIndex()>0){track=this.getIndex()-1}else if(this.loop){track=this.totalTracks()-1}else{return}const lastAudioPath=this.currentSource().audioPath;this.gotoTrack(track);this.onprev(lastAudioPath,this.currentSource().audioPath)};this.prev=e=>{if(this.totalTracks()===0){return}let wantsCallback=true;let track=0;let playlistIndex=this.getIndex();if(this.currentSource().getPosition()>0){this.currentSource().setPosition(0,e!==false);track=playlistIndex;wantsCallback=false}else if(this.singleMode&&this.loop){track=playlistIndex}else if(playlistIndex>0){track=playlistIndex-1}else if(this.loop){track=this.totalTracks()-1}else{return}const lastAudioPath=this.currentSource().audioPath;this.gotoTrack(track,e===true);if(wantsCallback){this.onprev(lastAudioPath,this.currentSource().audioPath)}};this.next=e=>{if(this.totalTracks()===0){return}let track=0;let playlistIndex=this.getIndex();if(this.singleMode){track=playlistIndex}else if(playlistIndex<this.totalTracks()-1){track=playlistIndex+1}else if(!this.loop){return}const lastAudioPath=this.currentSource().audioPath;this.gotoTrack(track,e===true,true);this.onnext(lastAudioPath,this.currentSource().audioPath)};this.play=()=>{if(this.totalTracks()===0){return}this.currentSource().play();if(this.exclusive){const{id}=this;for(const otherId in gapless5Players){if(otherId!==id.toString()){gapless5Players[otherId].stop()}}}this.onplayrequest(this.currentSource().audioPath)};this.playpause=e=>{if(this.isPlayButton){this.play(e)}else{this.pause(e)}};this.cue=e=>{if(!this.isPlayButton){this.prev(e)}else if(this.currentSource().getPosition()>0){this.prev(e);this.play(e)}else{this.play(e)}};this.pause=()=>{if(this.totalTracks()>0){this.currentSource().stop();this.onpause(this.currentSource().audioPath)}};this.stop=()=>{if(this.totalTracks()>0){this.currentSource().stop(true);if(this.currentSource().getPosition()>0){this.scrub(0,true)}this.onstop(this.currentSource().audioPath)}};this.isPlaying=()=>this.currentSource().inPlayState();const enableButton=(buttonId,bEnable)=>{if(this.hasGUI){const elem=getElement(buttonId);if(elem){const{classList}=elem;classList.remove(bEnable?"disabled":"enabled");classList.add(bEnable?"enabled":"disabled")}}};const enableShuffleButton=(mode,bEnable)=>{const elem=getElement("shuffle");if(elem){const isShuffle=mode==="shuffle";elem.classList.remove(isShuffle?"g5unshuffle":"g5shuffle");elem.classList.add(isShuffle?"g5shuffle":"g5unshuffle");enableButton("shuffle",bEnable)}};this.canShuffle=()=>this.totalTracks()>2;const updateDisplay=()=>{if(!this.hasGUI){return}if(this.totalTracks()===0){getElement("trackIndex").innerText="0";getElement("tracks").innerText="0";getElement("totalPosition").innerText="00:00.00";enableButton("prev",false);enableShuffleButton("shuffle",false);enableButton("next",false)}else{getElement("trackIndex").innerText=this.playlist.trackNumber;getElement("tracks").innerText=this.totalTracks();getElement("totalPosition").innerText=getTotalPositionText();enableButton("prev",this.loop||this.getIndex()>0||this.currentSource().getPosition()>0);enableButton("next",this.loop||this.getIndex()<this.totalTracks()-1);if(this.currentSource().inPlayState(true)){enableButton("play",false);this.isPlayButton=false}else{enableButton("play",true);this.isPlayButton=true;if(this.currentSource().state===Gapless5State.Error){this.onerror(this.currentSource().audioPath)}}enableShuffleButton(this.isShuffled()?"unshuffle":"shuffle",this.canShuffle())}};const tick=()=>{if(this.totalTracks()>0){this.currentSource().tick();if(this.uiDirty){this.uiDirty=false;updateDisplay()}if(this.currentSource().inPlayState()){let soundPos=this.currentSource().getPosition();if(this.isScrubbing){soundPos=this.scrubPosition}if(this.hasGUI){getElement("transportbar").value=getUIPos();getElement("currentPosition").innerText=getFormattedTime(soundPos)}}}if(tickCallback){window.clearTimeout(tickCallback)}tickCallback=window.setTimeout(tick,this.tickMS)};const createGUI=playerHandle=>{const{id}=this;const playerWrapper=html=>`
    <div class="g5position" id="g5position${id}">
      <span id="currentPosition${id}">00:00.00</span> |
      <span id="totalPosition${id}">${statusText.loading}</span> |
      <span id="trackIndex${id}">1</span>/<span id="tracks${id}">1</span>
    </div>
    <div class="g5inside" id="g5inside${id}">
      ${html}
    </div>
  `;if(typeof Audio==="undefined"){this.hasGUI=false;return playerWrapper("This player is not supported by your browser.")}return playerWrapper(`
    <div class="g5transport">
      <div class="g5meter" id="g5meter${id}"><span id="loaded-span${id}" style="width: 0%"></span></div>
        <input type="range" class="transportbar" name="transportbar" id="transportbar${id}"
        min="0" max="${scrubSize}" value="0" oninput="${playerHandle}.scrub(this.value);"
        onmousedown="${playerHandle}.onStartedScrubbing();" ontouchstart="${playerHandle}.onStartedScrubbing();"
        onmouseup="${playerHandle}.onFinishedScrubbing();" ontouchend="${playerHandle}.onFinishedScrubbing();" />
      </div>
    <div class="g5buttons" id="g5buttons${id}">
      <button class="g5button g5prev" id="prev${id}"></button>
      <button class="g5button g5play" id="play${id}"></button>
      <button class="g5button g5stop" id="stop${id}"></button>
      <button class="g5button g5shuffle" id="shuffle${id}"></button>
      <button class="g5button g5next" id="next${id}"></button>
      <input type="range" id="volume${id}" class="volume" name="gain" min="0" max="${scrubSize}"
        value="${scrubSize}" oninput="${playerHandle}.setVolume(this.value / ${scrubSize});"
      />
    </div>
  `)};const guiElement=options.guiId?document.getElementById(options.guiId):null;if(guiElement){this.hasGUI=true;guiElement.insertAdjacentHTML("beforeend",createGUI(`gapless5Players[${this.id}]`));if(navigator.userAgent.indexOf("macOS")===-1){getElement("transportbar").classList.add("g5meter-1pxup")}const onMouseDown=(elemId,cb)=>{const elem=getElement(elemId);if(elem){elem.addEventListener("mousedown",cb)}};onMouseDown("prev",this.prev);onMouseDown("play",this.playpause);onMouseDown("stop",this.stop);onMouseDown("shuffle",this.toggleShuffle);onMouseDown("next",this.next);enableButton("play",true);enableButton("stop",true);if(options.shuffleButton===false){const setElementWidth=(elemId,width)=>{const elem=getElement(elemId);if(elem){elem.style.width=width}};const transSize="111px";const playSize="115px";setElementWidth("transportbar",transSize);setElementWidth("g5meter",transSize);setElementWidth("g5position",playSize);setElementWidth("g5inside",playSize);getElement("shuffle").remove()}this.scrubWidth=getElement("transportbar").style.width}if(typeof Audio==="undefined"){log.error("This player is not supported by your browser.");return}if("startingTrack"in options){if(typeof options.startingTrack==="number"){this.startingTrack=options.startingTrack}else if(typeof options.startingTrack==="string"&&options.startingTrack==="random"){this.startingTrack="random"}}if("mapKeys"in options){this.mapKeys(options.mapKeys)}if("tracks"in options){let items=[];let startingTrack=0;if(Array.isArray(options.tracks)){if(typeof options.tracks[0]==="string"){items=options.tracks;for(let i=0;i<options.tracks.length;i++){items[i]=options.tracks[i]}}else if(typeof options.tracks[0]==="object"){for(let i=0;i<options.tracks.length;i++){items[i]=options.tracks[i].file}startingTrack=this.startingTrack||0}}else if(typeof options.tracks==="string"){items[0]=options.tracks}for(let i=0;i<items.length;i++){this.addTrack(items[i])}this.playlist.setStartingTrack(startingTrack)}this.initialized=true;this.uiDirty=true;tick()}(function umd(global,factory){if(typeof define==="function"&&define.amd){define(["exports"],factory)}else if(typeof exports!=="undefined"){factory(exports)}else{const mod={exports:{}};factory(mod.exports);global.Gapless5=mod.exports.Gapless5;global.LogLevel=mod.exports.LogLevel}})(this,exports=>{exports.Gapless5=Gapless5;exports.LogLevel=LogLevel});